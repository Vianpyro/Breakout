name: Create Release on PR Merge

on:
  push:
    branches:
      - main
    paths:
      - 'Cargo.toml' # Trigger only on version changes since a workflow verifies version bumps on Rust changes

permissions:
  contents: write

jobs:
  build:
    name: Build Game Binaries
    uses: ./.github/workflows/build-game-binary.yml
    secrets: inherit

  get-name:
    name: Get normalized repository name
    uses: ./.github/workflows/normalize-repository-name.yml
    secrets: inherit

  create_release:
    name: Create Release and Upload Assets
    needs: [build, get-name]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Download build artifacts (Linux)
        uses: actions/download-artifact@v4
        with:
          name: ${{ needs.get-name.outputs.name }}-ubuntu-latest
          path: dist/${{ needs.get-name.outputs.name }}-ubuntu-latest

      - name: Download build artifacts (Windows)
        uses: actions/download-artifact@v4
        with:
          name: ${{ needs.get-name.outputs.name }}-windows-latest
          path: dist/${{ needs.get-name.outputs.name }}-windows-latest

      - name: Download build artifacts (macOS)
        uses: actions/download-artifact@v4
        with:
          name: ${{ needs.get-name.outputs.name }}-macos-latest
          path: dist/${{ needs.get-name.outputs.name }}-macos-latest

      - name: Rename and flatten binaries
        run: |
          # Get normalized name from reusable job
          NAME='${{ needs.get-name.outputs.name }}'
          # Capitalize first character
          FIRST="${NAME:0:1}"
          REST="${NAME:1}"
          FIRST_UP="$(tr '[:lower:]' '[:upper:]' <<< "$FIRST")"
          CAPITALIZED="$FIRST_UP$REST"

          # Linux
          if [[ -f dist/${{ needs.get-name.outputs.name }}-ubuntu-latest/$NAME ]]; then
            cp dist/${{ needs.get-name.outputs.name }}-ubuntu-latest/$NAME dist/${NAME}-linux
          elif [[ -f dist/${{ needs.get-name.outputs.name }}-ubuntu-latest/$CAPITALIZED ]]; then
            cp dist/${{ needs.get-name.outputs.name }}-ubuntu-latest/$CAPITALIZED dist/${NAME}-linux
          fi

          # macOS
          if [[ -f dist/${{ needs.get-name.outputs.name }}-macos-latest/$NAME ]]; then
            cp dist/${{ needs.get-name.outputs.name }}-macos-latest/$NAME dist/${NAME}-macos
          elif [[ -f dist/${{ needs.get-name.outputs.name }}-macos-latest/$CAPITALIZED ]]; then
            cp dist/${{ needs.get-name.outputs.name }}-macos-latest/$CAPITALIZED dist/${NAME}-macos
          fi

          # Windows
          if [[ -f dist/${{ needs.get-name.outputs.name }}-windows-latest/${NAME}.exe ]]; then
            cp dist/${{ needs.get-name.outputs.name }}-windows-latest/${NAME}.exe dist/${NAME}-windows.exe
          elif [[ -f dist/${{ needs.get-name.outputs.name }}-windows-latest/${CAPITALIZED}.exe ]]; then
            cp dist/${{ needs.get-name.outputs.name }}-windows-latest/${CAPITALIZED}.exe dist/${NAME}-windows.exe
          fi

      - name: Retrieve version from Cargo.toml
        id: get_version
        run: |
          VERSION=$(grep '^version =' Cargo.toml | head -n 1 | cut -d '"' -f 2)
          echo "version=$VERSION" | tee -a "$GITHUB_OUTPUT"

      - name: Create GitHub release and upload assets
        uses: softprops/action-gh-release@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ steps.get_version.outputs.version }}
          name: 'Version ${{ steps.get_version.outputs.version }}'
          generate_release_notes: true
          draft: false
          prerelease: false
          fail_on_unmatched_files: false
          files: |
            dist/${{ needs.get-name.outputs.name }}-linux
            dist/${{ needs.get-name.outputs.name }}-macos
            dist/${{ needs.get-name.outputs.name }}-windows.exe
